/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package chat;


import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;
import java.util.Vector;
import javax.swing.DefaultListModel;

/**
 *
 * @author salim
 */
public class Servidor extends javax.swing.JFrame {

    private ServerSocket server;
    private final int puertoHost = 3000;
    /**
     * Creates new form Servidor
     */
    public Servidor() {
        initComponents();
        
        try{
            server = new ServerSocket(puertoHost);
            mensajeria("servidor con conexion \n");
            super.setVisible(true);
            
            while(true){
                Socket cliente = server.accept();
                mensajeria("Usuario connectado desde la direccion" + cliente.getInetAddress().getHostAddress());
                DataInputStream entrada = new DataInputStream(cliente.getInputStream());
                HiloServidor hilo = new HiloServidor (cliente,entrada.readUTF(),this);
                hilo.start();
            }   
            
        }catch (IOException ex){
            JOptionPane.showMessageDialog(this, ex.toString());
        }
    }
    
    public void mensajeria(String msg){
        this.jTextArea1.append(" "+msg+"\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       new Servidor();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}

class HiloServidor extends Thread{
    
    private DataInputStream entrada;
    private DataOutputStream salida;
    
    private Servidor server;
    private Socket Cliente;

    private String nombre;
    private ObjectOutputStream salidaObjeto;
    
    public static Vector <HiloServidor> usuarioActivo = new Vector();

    public HiloServidor (Socket socketcliente, String nombre, Servidor serv) {
        this.Cliente = socketcliente;
        this.server = serv;
        this.nombre = nombre;
        usuarioActivo.add(this);
        
        for (int i = 0; i < usuarioActivo.size(); i++) {
            try {
                usuarioActivo.get(i).enviosMensajes(nombre + " Se a conectado exitosamente");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    public void run(){
        String mensaje = " ";
        while (true) {
            try {
                entrada  = new DataInputStream(Cliente.getInputStream());
                mensaje = entrada.readUTF();
                
                
                for (int i = 0; i < usuarioActivo.size(); i++) {
                    usuarioActivo.get(i).enviosMensajes(mensaje);
                    server.mensajeria("mensaje enviado");
                }
                
            }catch (Exception error ){
                break;
            } 
        }
        
        usuarioActivo.removeElement(this);
        server.mensajeria("El usuario se ha desconectado....");
        
        try{
            Cliente.close();
                        
        }catch (IOException ex){
            
        }
    }

    public void enviosMensajes(String msg) throws Exception {
            salida = new DataOutputStream(Cliente.getOutputStream());
            salida.writeUTF(msg);
            DefaultListModel modelo = new DefaultListModel();
            
            for (int i = 0; i < usuarioActivo.size(); i++) {
                modelo.addElement(usuarioActivo.get(i).nombre);
                
            }
            
            salidaObjeto = new ObjectOutputStream(Cliente.getOutputStream());
            salidaObjeto.writeObject(modelo);
    }    
}
